# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      
      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run
      
  deploy:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - setup_remote_docker:
          docker_layer_caching: true
      - add_ssh_keys:
          fingerprints:
            - "98:fa:b6:08:17:31:0e:fc:90:72:54:c3:5b:ad:43:99"
      - run: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker-compose build
          docker-compose push
          echo "$STAGING_HOST ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBIrpq7r84u7IJUQjsAwocsEbK/o9e3dQj/aY8m7WWylBsavSy76EmmiHukgec+GNmV62baN1aHqGuizH6M5GdIM=" >> ~/.ssh/known_hosts
          ssh $STAGING_USER@$STAGING_HOST "/home/ubuntu/dojo-perf/deploy-branch.sh"
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
